<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Selenium 網頁爬蟲簡單分享 in Python</title>
    <url>/2023/03/21/selenium-intro/</url>
    <content><![CDATA[<h2 id="什麼是-Selenium？"><a href="#什麼是-Selenium？" class="headerlink" title="什麼是 Selenium？"></a>什麼是 Selenium？</h2><p><strong>Selenium</strong> 網頁爬蟲是一種透過程式模仿人類操作瀏覽器的方式，例如點擊連結、填入文字框等等，以便取得網頁中的資料  </p>
<span id="more"></span>

<h2 id="如何安裝使用-Selenium"><a href="#如何安裝使用-Selenium" class="headerlink" title="如何安裝使用 Selenium"></a>如何安裝使用 Selenium</h2><p>以下程式範例使用 Python 3.8，環境設定的部分暫不贅述  </p>
<h3 id="安裝-Selenium"><a href="#安裝-Selenium" class="headerlink" title="安裝 Selenium"></a>安裝 Selenium</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<h3 id="安裝瀏覽器驅動-Web-driver"><a href="#安裝瀏覽器驅動-Web-driver" class="headerlink" title="安裝瀏覽器驅動(Web driver)"></a>安裝瀏覽器驅動(Web driver)</h3><p>要讓 Selenium 操作瀏覽器時，需要安裝對應的瀏覽器驅動，下列為幾種常用的瀏覽器驅動，可以依照個人喜好挑選</p>
<ul>
<li>Chrome: <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox: <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge: <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari: <a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ul>
<p>後續範例皆使用 Chrome 瀏覽器</p>
<h2 id="Selenium-示範"><a href="#Selenium-示範" class="headerlink" title="Selenium 示範"></a>Selenium 示範</h2><p>下面為一段簡單的範例程式碼  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify the path to the browser driver executable</span></span><br><span class="line">browser = webdriver.Chrome(<span class="string">&#x27;/path/to/chromedriver&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># navigate to a webpage</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.example.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find an element by its CSS selector and click on it</span></span><br><span class="line">button = browser.find_element_by_css_selector(<span class="string">&#x27;#my-button&#x27;</span>)</span><br><span class="line">button.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill out a form and submit it</span></span><br><span class="line">input_field = browser.find_element_by_css_selector(<span class="string">&#x27;#my-input&#x27;</span>)</span><br><span class="line">input_field.send_keys(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br><span class="line">submit_button = browser.find_element_by_css_selector(<span class="string">&#x27;#submit-button&#x27;</span>)</span><br><span class="line">submit_button.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract information from the page</span></span><br><span class="line">heading = browser.find_element_by_css_selector(<span class="string">&#x27;h1&#x27;</span>).text</span><br><span class="line">paragraphs = browser.find_elements_by_css_selector(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> paragraphs:</span><br><span class="line">    <span class="built_in">print</span>(p.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close the browser window</span></span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在這個範例中，我們使用了 Selenium 驅動了 Chrome 瀏覽器，執行時會自動開啟一個瀏覽器畫面。<br>接著我們開啟 <a href="https://www.example.com/">https://www.example.com</a>，並且使用 CSS 選擇器選定一個按鈕點擊它。<br>再來繼續使用 CSS 選擇器找到文字框，輸入 <code>Hello, World!</code>，找到送出按鈕送出表單。<br>接下來再取得網頁中標題<code>h1</code>以及文字段落<code>p</code>，並且印出所有文字段落內的文字。<br>最後在結束前，別忘了使用<code>quit()</code>關閉瀏覽器。<br>以上範例只是個參考，讓大家能夠大略上理解，如何透過 Selenium 操控瀏覽器將瀏覽網頁行為自動化。  </p>
<p>接著會再介紹如何應用 Selenium 的其他功能，以便應付更複雜的情境。</p>
<h2 id="WebDriverWait-expected-condition"><a href="#WebDriverWait-expected-condition" class="headerlink" title="WebDriverWait, expected_condition"></a>WebDriverWait, expected_condition</h2><p>如果我們需要等待網頁DOM元件產生之後再爬取資料的話，與其直接用<code>time.sleep()</code>的方式，更應該善用Selenium自帶的<code>WebDriverWait</code>類別及<code>expected_conditions</code>模組，來幫助我們寫出更有效率的爬蟲  </p>
<p><code>WebDriverWait</code>是一個能夠等待特定條件達成後，才接著繼續執行後續程式的類別。  <code>expected_conditions</code>模組中有各種條件功能，能夠結合上面的類別，以便完成整個等待的過程。  </p>
<p>下面是個簡單的範例程式碼，讓爬蟲等待網頁中特定DOM元件完成顯示之後，再點擊此元件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new Chrome browser instance</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># navigate to the desired webpage</span></span><br><span class="line">browser.get(<span class="string">&#x27;https://www.example.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wait for the element with ID &quot;my_element&quot; to become visible</span></span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">element = wait.until(EC.visibility_of_element_located((By.ID, <span class="string">&#x27;my_element&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># do something with the element</span></span><br><span class="line">element.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># close the browser window</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>

<p>首先爬蟲開啟一個Chrome並且連到 <a href="https://www.example.com/">https://www.example.com</a><br>接著建立一個<code>WebDriverWait</code>物件，並且設定最大等待時間10秒  </p>
<p>再來使用 <code>expected_conditions</code> 模組中的 <code>visibility_of_element_located</code>去偵測指定DOM元件是否已經顯示在網頁中。這個函式需要一個參數去指定要偵測的DOM元件，這邊使用的是DOM的ID <code>my_element</code>  </p>
<p><code>WebDriverWait</code>的<code>until</code>會等到條件滿足，或者是超過最大等待時間。若是條件滿足的話，則會回傳<code>visibility_of_element_located</code>中指定的元件，好讓我們能對此元件做互動  </p>
<h2 id="Optional-Web-Driver-Manager"><a href="#Optional-Web-Driver-Manager" class="headerlink" title="(Optional) Web Driver Manager"></a>(Optional) Web Driver Manager</h2><p>由於前述的瀏覽器驅動需要依照使用者安裝的瀏覽器，去選擇下載對應版本的驅動，因此可以額外使用 python 套件 <code>Web Driver Manager</code> 去自動下載新的瀏覽器驅動。適合在本機開發時若是瀏覽器時常更新版本的話，就不需要手動去下載新的驅動</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install webdriver-manager</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.core.utils <span class="keyword">import</span> ChromeType</span><br><span class="line"></span><br><span class="line">chrome_type = ChromeType.GOOGLE</span><br><span class="line">browser = webdriver.Chrome(</span><br><span class="line">    service=Service(</span><br><span class="line">        ChromeDriverManager(chrome_type=chrome_type).install()</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技術分享</category>
        <category>爬蟲</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
        <tag>crawler</tag>
        <tag>web crawler</tag>
        <tag>網頁爬蟲</tag>
      </tags>
  </entry>
</search>
